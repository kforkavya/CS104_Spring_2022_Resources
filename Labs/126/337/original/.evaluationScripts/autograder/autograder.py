'''Import required modules'''
import json
import cv2
import numpy as np
import os
import time
from operation import vectorized
import importlib.util

# Load the .pyc file
spec = importlib.util.spec_from_file_location('my_module', '../vectorized.pyc')
my_module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(my_module)

overall = {
    'marks': {},
    'total': 0,
    'feedback': {}
}


marks = {}
feedback = {}

def verify_vectorized():

    size = [150,160]

    for i in range(2):
        # Create a random matrix
        matrix = np.load(f'../testcases/test_case_{i+1}.npy')

        # Calculate the result using the nonvectorized and vectorized functions

        s = time.time()
        sol_result = my_module.vectorized(matrix)
        e = time.time()
        sol_time = e - s
        
        s = time.time()
        vectorized_result = vectorized(matrix)
        e = time.time()
        vectorized_time = e - s


        if vectorized_result is None:
            marks['vectorized_test_case_' + str(i+1)] = 0
            feedback['vectorized_test_case_' + str(i+1)] = 'Nothing returned by vectorized function'
            continue
        elif vectorized_result.shape != sol_result.shape:
            marks['vectorized_test_case_' + str(i+1)] = 0
            feedback['vectorized_test_case_' + str(i+1)] = 'Shape of the result is not correct'
            continue

        # Check if the results are close
        result = np.allclose(sol_result, vectorized_result)

        # Check if the time are close
        time_result = vectorized_time/sol_time

        if time_result > 2:
            marks['vectorized_test_case_' + str(i+1)] = 0
            feedback['vectorized_test_case_' + str(i+1)] = 'Time taken by vectorized function is more than expected'
            continue

        if result:
            marks['vectorized_test_case_' + str(i+1)] = 2
            feedback['vectorized_test_case_' + str(i+1)] = 'success'
        else:
            marks['vectorized_test_case_' + str(i+1)] = 0
            feedback['vectorized_test_case_' + str(i+1)] = 'failed'

def calc():

    if not os.path.exists('../plot.png'):
        return 9999
    
    img1 = cv2.imread('../plot.png',0)
    img2 = cv2.imread('./plot.png',0) # Generated by student

    if img2 is None:
        return 9999
    if img1.shape != img2.shape:    
        return 9998

    res = cv2.absdiff(img1,img2)
    res = res.astype(np.uint8)
    return np.count_nonzero(res) * 100 / res.size



p = calc()


if p < 2:
    marks['plot'] = 3
    feedback['plot'] = 'success'
elif p==9999:
    marks['plot'] = 0
    feedback['plot'] = 'plot.png is not generated'
elif p==9998:
    marks['plot'] = 0
    feedback['plot'] = 'Wrong size of plot'
else:
    marks['plot'] = 0
    feedback['plot'] = 'failed'

verify_vectorized()

# --------------------------- Record ---------------------------
overall['marks'] = marks
overall['total'] = sum(compo for compo in marks.values())
overall['feedback'] = feedback
print('------------------------- MARKS ------------------------------')
print(json.dumps(marks, indent=4))
print('----------------------- FEEDBACK -----------------------------')
print(json.dumps(feedback, indent=4))
print('--------------------------------------------------------------')
print(f'Total: {sum(compo for compo in marks.values())}/7')
print('--------------------------------------------------------------')
with open('../evaluate.json', 'w', encoding='utf-8') as f:
    json.dump(overall, f, indent=4)
